--- !ruby/object:RI::ClassDescription
includes: []
name: OptionParser
comment: 
constants: 
- !ruby/object:RI::Constant
  name: BUILT_IN_FORMATTERS
  value: '{         ''specdoc''  => Formatter::SpecdocFormatter,         ''s''        =>
    Formatter::SpecdocFormatter,         ''html''     => Formatter::HtmlFormatter,         ''h''        =>
    Formatter::HtmlFormatter,         ''rdoc''     => Formatter::RdocFormatter,         ''r''        =>
    Formatter::RdocFormatter,         ''progress'' => Formatter::ProgressBarFormatter,         ''p''        =>
    Formatter::ProgressBarFormatter,         ''failing_examples'' => Formatter::FailingExamplesFormatter,         ''e''        =>
    Formatter::FailingExamplesFormatter,         ''failing_behaviours'' => Formatter::FailingBehavioursFormatter,         ''b''        =>
    Formatter::FailingBehavioursFormatter'
  comment: 
- !ruby/object:RI::Constant
  name: COMMAND_LINE
  value: '{         :diff =>    ["-D", "--diff [FORMAT]", "Show diff of objects that
    are expected to be equal when they are not",                                              "Builtin
    formats: unified|u|context|c",                                              "You
    can also specify a custom differ class",                                              "(in
    which case you should also specify --require)"],         :colour =>  ["-c", "--colour",
    "--color", "Show coloured (red/green) output"],         :example => ["-e", "--example
    [NAME|FILE_NAME]",  "Execute example(s) with matching name(s). If the argument
    is",                                                           "the path to an
    existing file (typically generated by a previous",                                                           "run
    using --format failing_examples:file.txt), then the examples",                                                           "on
    each line of thatfile will be executed. If the file is empty,",                                                           "all
    examples will be run (as if --example was not specified).",                                                           "
    ",                                                           "If the argument
    is not an existing file, then it is treated as",                                                           "an
    example name directly, causing RSpec to run just the example",                                                           "matching
    that name"],         :specification => ["-s", "--specification [NAME]", "DEPRECATED
    - use -e instead", "(This will be removed when autotest works with -e)"],         :line
    => ["-l", "--line LINE_NUMBER", Integer, "Execute behaviout or specification at
    given line.",                                                        "(does not
    work for dynamically generated specs)"],         :format => ["-f", "--format FORMAT[:WHERE]",  "Specifies
    what format to use for output. Specify WHERE to tell",                                                     "the
    formatter where to write the output. All built-in formats",                                                     "expect
    WHERE to be a file name, and will write to STDOUT if it''s",                                                     "not
    specified. The --format option may be specified several times",                                                     "if
    you want several outputs",                                                     "
    ",                                                     "Builtin formats: ",                                                     "progress|p           :
    Text progress",                                                     "specdoc|s            :
    Behaviour doc as text",                                                     "rdoc|r               :
    Behaviour doc as RDoc",                                                     "html|h               :
    A nice HTML report",                                                     "failing_examples|e   :
    Write all failing examples - input for --example",                                                     "failing_behaviours|b
    : Write all failing behaviours - input for --example",                                                     "
    ",                                                     "FORMAT can also be the
    name of a custom formatter class",                                                     "(in
    which case you should also specify --require to load it)"],         :require =>
    ["-r", "--require FILE", "Require FILE before running specs",                                           "Useful
    for loading custom formatters or other extensions.",                                           "If
    this option is used it must come before the others"],         :backtrace => ["-b",
    "--backtrace", "Output full backtrace"],         :loadby => ["-L", "--loadby STRATEGY",
    "Specify the strategy by which spec files should be loaded.",                                               "STRATEGY
    can currently only be ''mtime'' (File modification time)",                                               "By
    default, spec files are loaded in alphabetical order if --loadby",                                               "is
    not specified."],         :reverse => ["-R", "--reverse", "Run examples in reverse
    order"],         :timeout => ["-t", "--timeout FLOAT", "Interrupt and fail each
    example that doesn''t complete in the",                                               "specified
    time"],         :heckle => ["-H", "--heckle CODE", "If all examples pass, this
    will mutate the classes and methods",                                            "identified
    by CODE little by little and run all the examples again",                                            "for
    each mutation. The intent is that for each mutation, at least",                                            "one
    example *should* fail, and RSpec will tell you if this is not the",                                            "case.
    CODE should be either Some::Module, Some::Class or",                                            "Some::Fabulous#method}"],         :dry_run
    => ["-d", "--dry-run", "Invokes formatters without executing the examples."],         :options_file
    => ["-O", "--options PATH", "Read options from a file"],         :generate_options
    => ["-G", "--generate-options PATH", "Generate an options file for --options"],         :runner
    => ["-U", "--runner RUNNER", "Use a custom BehaviourRunner."],         :drb =>
    ["-X", "--drb", "Run examples via DRb. (For example against script/spec_server)"],         :version
    => ["-v", "--version", "Show version"],         :help => ["-h", "--help", "You''re
    looking at it"]'
  comment: 
attributes: []
instance_methods: 
- !ruby/object:RI::MethodSummary
  name: create_behaviour_runner
- !ruby/object:RI::MethodSummary
  name: parse
- !ruby/object:RI::MethodSummary
  name: parse_drb
- !ruby/object:RI::MethodSummary
  name: parse_help
- !ruby/object:RI::MethodSummary
  name: parse_options_file
- !ruby/object:RI::MethodSummary
  name: parse_version
- !ruby/object:RI::MethodSummary
  name: set_spec_from_line_number
full_name: Spec::Runner::OptionParser
superclass: Object
class_methods: 
- !ruby/object:RI::MethodSummary
  name: new
